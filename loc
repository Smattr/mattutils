#!/usr/bin/env python3

'''
a simple and stupid alternative to sloccount/cloc
'''

import argparse
import collections
import multiprocessing
import os
import sys

def count(path: str) -> int:
  try:
    # read the file in binary to avoid thinking about unicode
    with open(path, 'rb') as f:
      total = 0
      while True:
        c = f.read(1)
        if c == b'':
          break
        if c == b'\n':
          total += 1
      return total
  except IOError:
    return 0

def counter(q1: multiprocessing.Queue, q2: multiprocessing.Queue) -> None:

  totals = collections.defaultdict(int)

  while True:

    # grab the next file to examine
    path = q1.get()
    if path is None:
      break

    # figure out a category to put it in
    group = os.path.splitext(path)[-1]
    if group == '':
      group = os.path.basename(path)

    # add its lines to our local total
    totals[group] += count(path)

  # return our accrued totals
  q2.put(totals)

def main(args: [str]) -> int:

  # parse command line arguments
  parser = argparse.ArgumentParser(description='simple line counter')
  parser.add_argument('input', nargs='+', help='file or directory to examine')
  options = parser.parse_args(args[1:])

  ret = 0

  if len(options.input) == 1 and os.path.isfile(options.input[0]):
    # simply count this file
    print(f'{options.input[0]}: {count(options.input[0])}')

  else:

    CPUS = multiprocessing.cpu_count()

    # setup two communication pipes
    q1 = multiprocessing.Queue() # leader -> followers
    q2 = multiprocessing.Queue() # followers -> leader

    # start threads reading from q1
    pool: [multiprocessing.Process] = []
    for _ in range(CPUS - 1):
      p = multiprocessing.Process(target=counter, args=(q1, q2))
      p.start()
      pool.append(p)

    # push all files under the directory into q1
    for input in options.input:
      if os.path.isfile(input):
        q1.put(input)
      elif os.path.isdir(input):
        for root, _, files in os.walk(input):
          for f in files:
            path = os.path.join(root, f)
            q1.put(path)
      else:
        sys.stderr.write(f'{input} not found\n')
        ret = -1

    # push terminating markers into q1 for each thread
    for _ in range(len(pool)):
      q1.put(None)

    totals = collections.defaultdict(int)

    # collect and accumulate totals from each follower
    for p in pool:
      p.join()
      received = q2.get()
      for k, v in received.items():
        totals[k] += v

    # summarise
    for k, v in sorted(totals.items()):
      print(f'{k}: {v}')

  return ret

if __name__ == '__main__':
  sys.exit(main(sys.argv))
