#!/usr/bin/env python

'''
SSH proxy script for handling multipath redundancy.

A common idiom in ~/.ssh/config is the following to tunnel through a gateway:

    Host destination
        ProxyCommand ssh gateway nc -q0 %h %p

The built-in support for proxying like this assumes you are tunneling via a
single, fixed path. Sometimes your final destination is reachable via multiple
network routes of varying reliability. What you would like to be able to do is
to tell SSH to proxy your connection through any one of your routes that is
currently functional. This script allows you to support such a configuration
with something like the following:

    Host destination
        ProxyCommand ssh-proxy --gateway gateway1 --gateway gateway2 %h %p
'''

import argparse, os, signal, subprocess, sys

def main(argv):
    parser = argparse.ArgumentParser(description='multipath SSH proxy')
    parser.add_argument('--gateway', '-g', action='append', required=True,
        help='a potential host to proxy through')
    parser.add_argument('host', help='destination host')
    parser.add_argument('port', type=int, nargs='?', default=22,
        help='destination port')
    options = parser.parse_args(argv[1:])

    procs = {}
    devnull = open(os.devnull, 'w')

    # Fire off pings to all the gateways to see which are reachable.
    for g in options.gateway:
        p = subprocess.Popen(['ping', '-c', '1', g], stdout=devnull,
            stderr=devnull)
        procs[p.pid] = g

    # Wait until one responds with success.
    gateway = None
    while len(procs) > 0:
        pid, status = os.wait()
        assert pid in procs
        if status == 0:
            gateway = procs[pid]
        del procs[pid]
        if status == 0:
            break

    if gateway is None:
        assert len(procs) == 0
        sys.stderr.write('no reachable gateway found\n')
        return -1

    # SIGTERM any stragglers.
    for pid in procs:
        os.kill(pid, signal.SIGTERM)
    for pid in procs:
        os.waitpid(pid, 0)

    # Turn into ssh.
    os.execlp('ssh', 'ssh', gateway, 'nc', '-q0', options.host,
        str(options.port))

if __name__ == '__main__':
    sys.exit(main(sys.argv))
