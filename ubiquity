#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''
Automated synchronisation for git repositories (Ã  la distributed Dropbox).

This script is designed to be run on a schedule from a crontab or similar, to
automatically synchronise changes from a local working directory to a git
remote. It is assumed that this script is the only one touching your working
directory.
'''

import argparse, getpass, os, signal, socket, subprocess, sys

def run(args, info):
    info('$ %s' % ' '.join(args))
    p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = p.communicate()
    info(('%s\n%s' % (stdout, stderr)).strip())
    return p.returncode, stdout, stderr

def which(command, info):
    r, stdout, _ = run(['which', command], info)
    if r == 0:
        return stdout.strip()
    return None

def online(info):
    ret, _, _ = run(['ping', '-c', '1', '-w', '5', 'www.google.com'], info)
    return ret == 0

def main(argv, out, err):
    parser = argparse.ArgumentParser(
        description='synchronise a git working directory')
    parser.add_argument('--branch', '-b', default='master',
        help='branch to synchronise')
    parser.add_argument('--check', '-c', action='store_true',
        help='check whether a network connection is available first')
    parser.add_argument('--fsck', action='store_true',
        help='check the integrity of the working directory before '
        'synchronising')
    parser.add_argument('--no-commit', '-n', action='store_false',
        dest='commit', help='do not commit before pushing')
    parser.add_argument('--remote', '-r', default='origin',
        help='remote to synchronise with')
    parser.add_argument('--verbose', '-v', action='store_true',
        help='verbose output')
    parser.add_argument('dir', default=os.getcwd(),
        help='working directory to operate on')

    options = parser.parse_args(argv[1:])

    if options.verbose:
        def info(message):
            out.write('%s\n' %
                '\n'.join('+ %s' % line for line in message.split('\n')))
    else:
        def info(message):
            pass

    if which('git', info) is None:
        err.write('git not found\n')
        return -1

    user = getpass.getuser()
    host = socket.gethostname()

    info('cd %s' % options.dir)
    try:
        os.chdir(options.dir)
    except OSError as e:
        err.write('failed to chdir to %s: %s\n' % (options.dir, e))
        return -1

    ret, stdout, stderr = run(['git', 'branch', '--no-color'], info)
    if ret != 0:
        err.write('`git branch` failed:\n%s\n%s\n' % (stdout, stderr))
        return ret
    if ('* %s' % options.branch) not in stdout.split('\n'):
        err.write('not on specified branch (%s)\n' % options.branch)
        return -1

    if options.fsck:
        ret, stdout, stderr = run(['git', 'fsck'], info)
        if ret != 0:
            err.write('`git fsck` failed:\n%s\n%s\n' % (stdout, stderr))
            return ret

    if options.commit:

        ret, stdout, stderr = run(['git', 'add', '--all', '.'], info)
        if ret != 0:
            err.write('`git add --all .` failed:\n%s\n%s\n' % (stdout, stderr))
            return ret

        ret, stdout, stderr = run(['git', 'commit', '--message',
            'Auto-commit from %s@%s.' % (user, host)], info)
        if ret != 0 and 'nothing to commit' not in stdout:
            err.write('`git commit ...` failed:\n%s\n%s\n' % (stdout, stderr))
            return ret

    if options.check:
        if not online(info):
            return 0

        ret, stdout, stderr = run(['git', 'ls-remote', options.remote], info)
        if ret != 0:
            # Remote is unavailable.
            if options.verbose:
                err.write('`git ls-remote ...` failed:\n%s\n%s\n' % (stdout,
                    stderr))
            return 0

    if options.commit:
        ret, stdout, stderr = run(['git', 'pull', '--rebase', '--ff-only',
            '--tags', options.remote, options.branch], info)
        if ret != 0:
            err.write('`git pull ...` failed:\n%s\n%s\n' % (stdout, stderr))
            run(['git', 'rebase', '--abort'], info)
            return ret

    ret, stdout, stderr = run(['git', 'push', '--tags', options.remote,
        options.branch], info)
    if ret != 0:
        err.write('`git push ...` failed:\n%s\n%s\n' % (stdout, stderr))
        return -1

    return 0

if __name__ == '__main__':
    try:
        sys.exit(main(sys.argv, sys.stdout, sys.stderr))
    except KeyboardInterrupt:
        sys.exit(130)
