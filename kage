#!/usr/bin/env python3

'''
A simple build-from-source package manager.

This is designed to be little more than a glorified shell script. I use it
mainly for automating the management of packages I reinstall frequently.
'''

import argparse, os, pathlib, shutil, subprocess, sys, tempfile

KAGE_ROOT = pathlib.Path(os.environ.get('KAGE_ROOT', pathlib.Path.home() / '.kage'))
PACKAGES = pathlib.Path(__file__).resolve().parent / 'packages'

def run(args):
    tmp = tempfile.mkdtemp()

    result = subprocess.call(args, cwd = tmp,
        env = dict(os.environ, KAGE_ROOT = KAGE_ROOT))

    shutil.rmtree(tmp)

    return result

def check(package):
    p = PACKAGES / package / 'check'
    if not p.is_file():
        p = PACKAGES / 'default' / 'check'

    return run([p, package]) == 0

def install(package):
    present = check(package)

    if present:
        sys.stdout.write('%s is already installed\n' % package)
        return 0
    else:
        sys.stdout.write('Installing %s...\n' % package)

        script = PACKAGES / package / 'install'
        if not script.is_file():
            sys.stderr.write('%s is not installed and I don\'t know how to install it\n' % package)
            return -1

        deps = PACKAGES / package / 'dependencies'
        if deps.is_dir():
            for dep in [d.name for d in deps.iterdir()]:
                sys.stdout.write('Considering dependency %s...\n' % dep)
                r = install(dep)
                if r != 0:
                    return r

        return run([script, package])

def status(package):
    present = check(package)

    sys.stdout.write('%s %s\n' % (package,
        'installed' if present else 'not installed'))
    return 0

def main(argv):

    ACTIONS = {
        'install':install,
        'status':status,
    }

    parser = argparse.ArgumentParser(
        description = 'a simple build-from-source package manager')
    parser.add_argument('action', choices = ACTIONS.keys(),
        help = 'action to run')
    parser.add_argument('package', help = 'package to operate on')

    opts = parser.parse_args(argv[1:])

    return ACTIONS[opts.action](opts.package)

if __name__ == '__main__':
    sys.exit(main(sys.argv))
