#!/usr/bin/env python

'''
An rsync wrapper allowing both the source and destination to be remote URLs.

Ordinarily rsync has a limitation where it rejects transfers where both the
source and destination are remote. Presumably this is for reasons related to
performance, security or legacy concerns, but sometimes you are in a closed
environment without performance constraints and you just want rsync to do the
obvious thing. This script makes that possible by FUSE-mounting the destination
to fool rsync into thinking it is local. The resulting transfer is probably
quite inefficient, but this is rarely a show stopper.
'''

import atexit, os, subprocess, sys, tempfile

ME = os.path.abspath(__file__)

def is_remote(path):
    '''
    Determine whether a URL represents a remote path.
    '''
    return ':' in path

def call(argv, need_return=False):
    '''
    Call the real rsync with the given arguments.
    '''
    for root in os.environ.get('PATH', '').split(':'):
        rsync = os.path.abspath(os.path.join(root, 'rsync'))
        if rsync != ME and os.path.isfile(rsync) and os.access(rsync, os.X_OK):
            break
    else:
        sys.stderr.write('real rsync not found\n')
        return -1

    if need_return:
        return subprocess.call([rsync] + argv)

    os.execv(rsync, [rsync] + argv)

def main(argv):
    source_index = None
    target_index = None

    # Find the source and target paths.
    for index, arg in list(enumerate(argv))[1:]:
        if not arg.startswith('-'):
            if source_index is None:
                source_index = index
            elif target_index is None:
                target_index = index
            else:
                # Three non-flag arguments. Who knows? Just bail out.
                return call(argv[1:])

    if source_index is None or target_index is None:
        # Fewer than two non-flag arguments. Bail out.
        return call(argv[1:])

    # If at least one of the paths is local, we don't need this wrapper.
    if not is_remote(argv[source_index]) or not is_remote(argv[target_index]):
        return call(argv[1:])

    # Create a temporary mount point.
    tmp = tempfile.mkdtemp()
    atexit.register(os.rmdir, tmp)

    # Mount the destination.
    try:
        subprocess.check_call(['sshfs', argv[target_index], tmp])
    except (subprocess.CalledProcessError, OSError) as e:
        sys.stderr.write('sshfs failed to mount %s: %s\n' %
            (argv[target_index], e))
        return -1
    atexit.register(subprocess.call, ['fusermount', '-u', tmp])

    # Rsync should now be able to cope.
    return call(argv[1:target_index] + [tmp] + argv[target_index + 1:], True)

if __name__ == '__main__':
    try:
        sys.exit(main(sys.argv))
    except KeyboardInterrupt:
        sys.exit(130)
