#!/usr/bin/env python

'''
Add some useful colouring to objdump output. You're expected to create a
symlink to this script with the same name as your regular objdump, earlier in
your PATH. From this, the script will work out the path of the backing objdump
to call and will colourise its output.
'''

import os, re, subprocess, sys

GREEN = '\033[32m'
RED = '\033[31m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'
RESET = '\033[0m'

SYSCALL = RED + BOLD
SYSCALL_RETURN = RED + BOLD
CALL = BOLD
RETURN = BOLD
COPROCESSOR_ACCESS = GREEN + BOLD

# Instructions to treat specially. Add any here with a style you want to be
# used for lines containing them.
SPECIAL = {
    'mrc':COPROCESSOR_ACCESS,
    'mcr':COPROCESSOR_ACCESS,
    'svc':SYSCALL,
    'sysenter':SYSCALL,
    'syscall':SYSCALL,
    'int':SYSCALL,
    'sysret':SYSCALL_RETURN,
    'sysexit':SYSCALL_RETURN,
    'rfe':SYSCALL_RETURN,
    'rfeia':SYSCALL_RETURN,
    'rfeib':SYSCALL_RETURN,
    'rfeda':SYSCALL_RETURN,
    'rfedb':SYSCALL_RETURN,
    'eret':SYSCALL_RETURN,
    'bx':RETURN,
    'bl':CALL,
    'call':CALL,
    'callq':CALL,
    'ret':RETURN,
}

# Page alignment of your architecture. This is used to show page boundaries in
# the output.
ALIGNMENT = 4096

# Known syscalls for your platform to annotate.
SYSNO = {
    'svc\t0x00ffffff':'Call',
    'svc\t0x00fffffe':'ReplyWait',
    'svc\t0x00fffffd':'Send',
    'svc\t0x00fffffc':'NBSend',
    'svc\t0x00fffffb':'Wait',
    'svc\t0x00fffffa':'Reply',
    'svc\t0x00fffff9':'Yield',
    'svc\t0x00fffff8':'Poll',
}

def main():

    # Find the underlying objdump we'll need to call.
    me = os.path.realpath(__file__)
    cmd = os.path.basename(sys.argv[0])
    objdump = None
    for root in os.environ.get('PATH', '').split(':'):
        p = os.path.join(root, cmd)
        if os.path.isfile(p) and os.access(p, os.X_OK) and not os.path.realpath(p) == me:
            objdump = p
            break
    if objdump is None:
        print >>sys.stderr, 'supporting objdump \'%s\' not found' % cmd
        return -1

    args = sys.argv[1:]
    tty = sys.stdout.isatty()
    colour = tty
    for a in args:
        r = re.match(r'^--(?:color|colour)=(.*)$', a)
        if r is not None:
            if r.group(1) == 'never':
                colour = False
            elif r.group(1) == 'always':
                colour = True
            elif r.group(1) == 'auto':
                colour = tty
    args = filter(lambda x: not re.match(r'^--(?:color|colour)=.*$', x), args)

    if not colour:
        # We're being piped into another program or a file or the user
        # explicitly requested no colour. Fall back to raw objdump as the
        # reader may be relying on a lack of control characters in the output.
        return subprocess.call([objdump] + args)

    # Run it.
    p = subprocess.Popen([objdump] + args, stdout=subprocess.PIPE)
    stdout, stderr = p.communicate()

    try:
        if stdout != '':

            # Form some relevant regexs before the main loop for performance.
            last_line = None
            regexs = []
            for instr, fmt in SPECIAL.items():
                regexs.append((re.compile('^.*\t%s\t.*$' % instr), fmt))
            addr = re.compile('^([0-9a-fA-F ]{8}):.*$')
            sysno = []
            for trap, call in SYSNO.items():
                sysno.append((re.compile('^.*%s.*$' % trap), call))

            # The structure of this loop is a bit peculiar (printing the line
            # from the last iteration) because we want to underline any line
            # that comes immediately *before* a page boundary.
            fmt = ''
            for l in stdout.split('\n') + ['']:

                # Check if the current address is a page boundary and, if so,
                # underline the previous.
                a = addr.match(l)
                if a:
                    address = int(a.group(1), 16)
                    if address % ALIGNMENT == 0:
                        fmt += UNDERLINE

                if last_line is not None:
                    print '%(fmt)s%(line)s%(reset)s' % {
                        'fmt':fmt,
                        'line':last_line,
                        'reset':RESET,
                    }

                # If this instruction is a syscall and we know its name,
                # annotate it as such.
                for s in sysno:
                    if s[0].match(l):
                        l += ' <%s>' % s[1]
                        break

                # Determine the format for the current line.
                fmt = ''
                for r in regexs:
                    if r[0].match(l):
                        fmt += r[1]
                last_line = l
    except IOError:
        # Our output was being piped into another program that closed the pipe
        # on us. Ignore.
        pass

    return p.returncode

if __name__ == '__main__':
    sys.exit(main())
