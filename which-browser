#!/usr/bin/env python3

'''
experiment in a browser picker for handling URLs

To use this, put something like the following in
~/.local/share/applications/which-browser.desktop:

  [Desktop Entry]
  Type=Application
  Name=which-browser
  Comment=Browser picker
  Terminal=false
  Exec=which-browser %U
  Categories=Network;WebBrowser

and then add something like this to ~/.local/share/applications/mimeapps.list:

  [Default Applications]
  x-scheme-handler/http=which-browser.desktop
  x-scheme-handler/https=which-browser.desktop
  x-scheme-handler/ftp=which-browser.desktop
  x-scheme-handler/chrome=which-browser.desktop
  text/html=which-browser.desktop
  application/x-extension-htm=which-browser.desktop
  application/x-extension-html=which-browser.desktop
  application/x-extension-shtml=which-browser.desktop
  application/xhtml+xml=which-browser.desktop
  application/x-extension-xhtml=which-browser.desktop
  application/x-extension-xht=which-browser.desktop
'''

import os
import shutil
import subprocess
import sys

options = []

if shutil.which('chromium-browser') is not None:
  options.append(['chromium-browser'])
  options.append(['chromium-browser', '--new-window'])
  options.append(['chromium-browser', '--incognito'])

if shutil.which('google-chrome') is not None:
  options.append(['google-chrome'])
  options.append(['google-chrome', '--new-window'])
  options.append(['google-chrome', '--incognito'])

if shutil.which('firefox') is not None:
  options.append(['firefox'])
  options.append(['firefox', '--new-window'])
  options.append(['firefox', '--private-window'])

if shutil.which('xdg-open') is not None:
  options.append(['xdg-open'])

if len(options) == 0:
  os.execvp('zenity', ['zenity', '--error', '--text=No available browsers.',
    '--title=which-browser'])

if len(options) == 1:
  browser = options[0]

else:
  args = ['zenity', '--list', '--radiolist', '--text=Select browser',
    '--title=which-browser', '--column=', '--column=', '--width=400',
    '--height=400', '--hide-header']
  for i, b in enumerate(options):
    args += ['TRUE' if i == 0 else 'FALSE', ' '.join(b)]

  try:
    browser = subprocess.check_output(args, universal_newlines=True).strip()
  except subprocess.CalledProcessError:
    sys.exit(0)

  browser = browser.split(' ')

os.execvp(browser[0], browser + sys.argv[1:])
