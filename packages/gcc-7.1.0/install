#!/usr/bin/env bash

# Exit on error
set -e

# Figure out how many CPUs we have
JOBS=1
if which getconf &>/dev/null; then
  if getconf _NPROCESSORS_ONLN &>/dev/null; then
    JOBS=$(getconf _NPROCESSORS_ONLN)
  elif getconf NPROCESSORS_ONLN &>/dev/null; then
    JOBS=$(getconf NPROCESSORS_ONLN)
  fi
fi

function download() {
  if which wget &>/dev/null; then
    wget "$1"
  elif which curl &>/dev/null; then
    curl --remote-name "$1"
  else
    printf "no suitable download tool found\n" >&2
    exit 1
  fi
}

function sha512() {
  if which sha512sum &>/dev/null; then
    sha512sum "$@"
  elif which shasum &>/dev/null; then
    shasum --algorithm 512 "$@"
  else
    printf "no suitable sha512 tool found\n" >&2
    exit 1
  fi
}

printf "Downloading...\n"
download "http://www.netgull.com/gcc/releases/gcc-7.1.0/gcc-7.1.0.tar.bz2"
download "http://www.netgull.com/gcc/releases/gcc-7.1.0/sha512.sum"

printf "Validating...\n"
head -1 sha512.sum >justbz2.sum
sha512 --check justbz2.sum

printf "Extracting...\n"
tar xvf gcc-7.1.0.tar.bz2

printf "Configuring...\n"
cd gcc-7.1.0
./configure --with-gmp=${KAGE_ROOT}/libgmp-6.1.2 --with-mpfr=${KAGE_ROOT}/libmpfr-3.1.6 --with-mpc=${KAGE_ROOT}/libmpc-1.0.3 --prefix=${KAGE_ROOT}/gcc-7.1.0

printf "Compiling...\n"
make --jobs=${JOBS}

printf "Installing...\n"
make install

printf "Setting up wrappers...\n"
mkdir -p "${KAGE_ROOT}/gcc-7.1.0/wrapper"
for f in $(ls ${KAGE_ROOT}/gcc-7.1.0/bin); do
  cat - >${KAGE_ROOT}/gcc-7.1.0/wrapper/$f <<EOT
#!/usr/bin/env bash

export LD_LIBRARY_PATH=${KAGE_ROOT}/libgmp-6.1.2/lib:${KAGE_ROOT}/libmpfr-3.1.6/lib:${KAGE_ROOT}/libmpc-1.0.3/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
exec ${KAGE_ROOT}/gcc-7.1.0/bin/$f "\$@"
EOT
  chmod +x ${KAGE_ROOT}/gcc-7.1.0/wrapper/$f
done
