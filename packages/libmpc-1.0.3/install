#!/usr/bin/env bash

# Exit on error
set -e

# Figure out how many CPUs we have
JOBS=1
if which getconf &>/dev/null; then
  if getconf _NPROCESSORS_ONLN &>/dev/null; then
    JOBS=$(getconf _NPROCESSORS_ONLN)
  elif getconf NPROCESSORS_ONLN &>/dev/null; then
    JOBS=$(getconf NPROCESSORS_ONLN)
  fi
fi

function download() {
  if which wget &>/dev/null; then
    wget "$1"
  elif which curl &>/dev/null; then
    curl --remote-name "$1"
  else
    printf "no suitable download tool found\n" >&2
    exit 1
  fi
}

printf "Downloading...\n"
download "ftp://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gz"

if which gpg &>/dev/null; then
  download "ftp://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gz.sig"

  printf "Validating...\n"
  gpg --keyserver pool.sks-keyservers.net --recv-keys F7D5C9BF765C61E3
  gpg --verify mpc-1.0.3.tar.gz.sig
else
  printf "Warning: GPG not found; skipping validation\n" >&2
fi

printf "Extracting...\n"
tar xvf mpc-1.0.3.tar.gz

printf "Configuring...\n"
cd mpc-1.0.3
./configure --prefix=${KAGE_ROOT}/libmpc-1.0.3 --with-mpfr=${KAGE_ROOT}/libmpfr-3.1.6 --with-gmp=${KAGE_ROOT}/libgmp-6.1.2

printf "Compiling...\n"
make --jobs=${JOBS}

printf "Installing...\n"
make install
