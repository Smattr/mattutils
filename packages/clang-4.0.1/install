#!/usr/bin/env bash

# Exit on error
set -e

function download() {
  if which wget &>/dev/null; then
    wget "$1"
  elif which curl &>/dev/null; then
    curl --remote-name "$1"
  else
    printf "no suitable download tool found\n" >&2
    exit 1
  fi
}

printf "Downloading LLVM...\n"
download "http://releases.llvm.org/4.0.1/llvm-4.0.1.src.tar.xz"
tar xvf llvm-4.0.1.src.tar.xz
mv llvm-4.0.1.src llvm

printf "Downloading Clang...\n"
download "http://releases.llvm.org/4.0.1/cfe-4.0.1.src.tar.xz"
tar xvf cfe-4.0.1.src.tar.xz
mv cfe-4.0.1.src llvm/tools/clang

printf "Downloading clang-tools-extra...\n"
download "http://releases.llvm.org/4.0.1/clang-tools-extra-4.0.1.src.tar.xz"
tar xvf clang-tools-extra-4.0.1.src.tar.xz
mv clang-tools-extra-4.0.1.src llvm/tools/clang/tools/extra

printf "Downloading compiler-rt...\n"
download "http://releases.llvm.org/4.0.1/compiler-rt-4.0.1.src.tar.xz"
tar xvf compiler-rt-4.0.1.src.tar.xz
mv compiler-rt-4.0.1.src llvm/projects/compiler-rt

printf "Compiling...\n"
mkdir build
cd build

# Use GCC 7.2.0 instead of the local GCC so we know we'll have C++17 etc support.
cmake -G Ninja -DCMAKE_C_COMPILER=${KAGE_ROOT}/gcc-7.2.0/wrapper/gcc \
  -DCMAKE_CXX_COMPILER=${KAGE_ROOT}/gcc-7.2.0/wrapper/g++ \
  -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${KAGE_ROOT}/clang-4.0.1 \
  -DGCC_INSTALL_PREFIX=${KAGE_ROOT}/gcc-7.2.0 \
  -DCMAKE_CXX_LINK_FLAGS="-L${KAGE_ROOT}/gcc-7.2.0/lib64 -Wl,-rpath,${KAGE_ROOT}/gcc-7.2.0/lib64" ../llvm
ninja
ninja install
