[user]
    name = Matthew Fernandez
[color]
    ui = True
[pager]
    status = True
    diff = "less -FRSX +Gg"
    branch = True

[alias]
    co = clone
    st = status
    glog = log --graph --stat
    incoming = "!git fetch origin master && git log ..origin/master"
    outgoing = "!git getch origin master && git log origin/master.."
    in = incoming
    out = outgoing
    root = rev-parse --show-toplevel
    cp = cherry-pick

    # Fix Git's shitty inability to bisect when not at the top level
    bi = "!f() { git rev-parse --show-toplevel >/dev/null && cd $(git rev-parse --show-toplevel) && git bisect \"$@\"; }; f"

    # More advanced rebasing tool. See rerebase.c.
    re = "!f() { GIT_EDITOR=rerebase git rebase \"$@\"; }; f"

    # Smart diffs. See dif.cpp.
    di = "!f() { { which dif >/dev/null 2>/dev/null || { echo \"dif not found\" >&2; exit 1; }; } && [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\" && git diff \"$@\" | dif; }; f"
    sh = "!f() { { which dif >/dev/null 2>/dev/null || { echo \"dif not found\" >&2; exit 1; }; } && [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\" && git show --color \"$@\" | dif; }; f"

    # Bisect-like tool. See git-linear.cpp.
    li = linear
    linear = "!f() { git-linear \"$@\"; }; f"

    # Access to current bug tracker. Primarily here so we can swap out Bugs
    # Everywhere for something else if desired.
    issue = "!f() { be \"$@\"; }; f"

    # C'mon, Git, you know what I meant.
    bad = "!git bi bad"
    good = "!git bi good"

    # Create a new temporary branch and check it out.
    tmp = "!git checkout -b $(uuidgen)"

[merge]
    conflictstyle = diff3

[log]
    decorate = True

[rebase]
    autoStash = True
    autoSquash = True
    stat = True

[diff]
    noprefix = True

[interactive]
    singlekey = True

[include]
    path = .gitconfig_mattbin

[pack]
    # Limit the amount of RAM used in a repack. Without this, an aggressive GC
    # on a large repo often runs out of memory.
    windowMemory = 1g
