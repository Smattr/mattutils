[user]
  name = Matthew Fernandez
[color]
  ui = True
[pager]
  status = True
  diff = "less -FRSX +Gg"
  branch = True

[alias]
  ci = commit
  co = clone
  st = status
  glog = log --graph --pretty=fuller --stat
  incoming = "!git fetch origin master && git log ..origin/master"
  outgoing = "!git getch origin master && git log origin/master.."
  in = incoming
  out = outgoing
  root = rev-parse --show-toplevel
  cp = cherry-pick
  pf = push --force-with-lease

  # fix Gitâ€™s inability to bisect when not at the top level
  bi = "!f() { git rev-parse --show-toplevel >/dev/null && cd $(git rev-parse --show-toplevel) && git bisect \"$@\"; }; f"

  # More advanced rebasing tool. See rerebase.c.
  re = "!f() { GIT_SEQUENCE_EDITOR=rerebase git rebase \"$@\"; }; f"

  # Smart diffs. See dif.cpp.
  di = "!f() { { command -v dif >/dev/null 2>/dev/null || { printf \"dif not found\\n\" >&2; exit 1; }; } && [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\" && git diff \"$@\" | dif; }; f"
  sh = "!f() { { command -v dif >/dev/null 2>/dev/null || { printf \"dif not found\\n\" >&2; exit 1; }; } && [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\" && git show --color \"$@\" | dif; }; f"

  # C'mon, Git, you know what I meant.
  bad = "!git bi bad"
  good = "!git bi good"
  new = "git bi new"
  old = "git bi old"

  # Create a new temporary branch and check it out.
  tmp = "!f() { { command -v uuidgen >/dev/null 2>/dev/null || { printf \"uuidgen not found\\n\" >&2; exit 1; }; } && git checkout -b $(git config github.username)/$(uuidgen); }; f"

  # Work around duplicated 'git's (http://caiustheory.com/git-git-git-git-git/).
  git = "!exec git"

  # glog back to the most recent common ancestor of several refs
  relate = "!f() { git glog $(for i in \"$@\"; do printf '%s~1..%s ' \"$(git merge-base \"$@\")\" \"${i}\"; done); }; f"

  cleanup = "!f() { git-cleanup.py \"$@\"; }; f"
  edit = "!f() { git-edit.py \"$@\"; }; f"
  inc = "!f() { git-increment.py \"$@\"; }; f"
  retime = "!f() { git-retime.py \"$@\"; }; f"
  reup = "!f() { git-reup.py \"$@\"; }; f"

[github]
  username = smattr

[merge]
  conflictstyle = diff3

[log]
  decorate = True

[pull]
  rebase = False
  autoStash = True

[rebase]
  autoStash = True
  autoSquash = True
  stat = True

[diff]
  noprefix = True

[interactive]
  singlekey = True

[pack]
  # Limit the amount of RAM used in a repack. Without this, an aggressive GC
  # on a large repo often runs out of memory.
  windowMemory = 1g

[core]
  commentChar = ";"

# local override settings that may or may not exist
[include]
  path = .gitconfig_local
